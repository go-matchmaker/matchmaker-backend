// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user.sql

package user_sql

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const DeleteAll = `-- name: DeleteAll :exec
DELETE FROM users
`

func (q *Queries) DeleteAll(ctx context.Context, db DBTX) error {
	_, err := db.Exec(ctx, DeleteAll)
	return err
}

const DeleteOne = `-- name: DeleteOne :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteOne(ctx context.Context, db DBTX, id uuid.UUID) error {
	_, err := db.Exec(ctx, DeleteOne, id)
	return err
}

const GetByEmail = `-- name: GetByEmail :one
SELECT id, role, name, surname, email, phone_number, password_hash, created_at, updated_at FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetByEmail(ctx context.Context, db DBTX, email string) (*Users, error) {
	row := db.QueryRow(ctx, GetByEmail, email)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.Role,
		&i.Name,
		&i.Surname,
		&i.Email,
		&i.PhoneNumber,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const GetByID = `-- name: GetByID :one
SELECT id, role, name, surname, email, phone_number, password_hash, created_at, updated_at FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetByID(ctx context.Context, db DBTX, id uuid.UUID) (*Users, error) {
	row := db.QueryRow(ctx, GetByID, id)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.Role,
		&i.Name,
		&i.Surname,
		&i.Email,
		&i.PhoneNumber,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const Insert = `-- name: Insert :one
INSERT INTO users (
    id,
    role,
    name,
    surname,
    email,
    phone_number,
    password_hash,
    created_at,
    updated_at
 ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9
) RETURNING id, role, name, surname, email, phone_number, password_hash, created_at, updated_at
`

type InsertParams struct {
	ID           uuid.UUID `json:"id"`
	Role         string    `json:"role"`
	Name         string    `json:"name"`
	Surname      string    `json:"surname"`
	Email        string    `json:"email"`
	PhoneNumber  string    `json:"phone_number"`
	PasswordHash string    `json:"password_hash"`
	CreatedAt    time.Time `json:"created_at"`
	UpdatedAt    time.Time `json:"updated_at"`
}

func (q *Queries) Insert(ctx context.Context, db DBTX, arg *InsertParams) (*Users, error) {
	row := db.QueryRow(ctx, Insert,
		arg.ID,
		arg.Role,
		arg.Name,
		arg.Surname,
		arg.Email,
		arg.PhoneNumber,
		arg.PasswordHash,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.Role,
		&i.Name,
		&i.Surname,
		&i.Email,
		&i.PhoneNumber,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const Update = `-- name: Update :one
UPDATE users
SET
    name = COALESCE($1, name),
    surname = COALESCE($2, surname),
	role = COALESCE($3, role),
    email = COALESCE($4, email),
    phone_number = COALESCE($5, phone_number),
    password_hash = COALESCE($6, password_hash),
    updated_at = COALESCE($7, updated_at)
WHERE
id = $8
RETURNING id, role, name, surname, email, phone_number, password_hash, created_at, updated_at
`

type UpdateParams struct {
	Name         pgtype.Text        `json:"name"`
	Surname      pgtype.Text        `json:"surname"`
	Role         pgtype.Text        `json:"role"`
	Email        pgtype.Text        `json:"email"`
	PhoneNumber  pgtype.Text        `json:"phone_number"`
	PasswordHash pgtype.Text        `json:"password_hash"`
	UpdatedAt    pgtype.Timestamptz `json:"updated_at"`
	ID           uuid.UUID          `json:"id"`
}

func (q *Queries) Update(ctx context.Context, db DBTX, arg *UpdateParams) (*Users, error) {
	row := db.QueryRow(ctx, Update,
		arg.Name,
		arg.Surname,
		arg.Role,
		arg.Email,
		arg.PhoneNumber,
		arg.PasswordHash,
		arg.UpdatedAt,
		arg.ID,
	)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.Role,
		&i.Name,
		&i.Surname,
		&i.Email,
		&i.PhoneNumber,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
