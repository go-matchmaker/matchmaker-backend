// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user.sql

package user

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const GetUser = `-- name: GetUser :one
SELECT id, user_role, name, surname, email, phone_number, company_name, company_type, company_website, password_hash, created_at, updated_at FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, db DBTX, id uuid.UUID) (*Users, error) {
	row := db.QueryRow(ctx, GetUser, id)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.UserRole,
		&i.Name,
		&i.Surname,
		&i.Email,
		&i.PhoneNumber,
		&i.CompanyName,
		&i.CompanyType,
		&i.CompanyWebsite,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const GetUserByEmail = `-- name: GetUserByEmail :one
SELECT id, user_role, name, surname, email, phone_number, company_name, company_type, company_website, password_hash, created_at, updated_at FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, db DBTX, email string) (*Users, error) {
	row := db.QueryRow(ctx, GetUserByEmail, email)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.UserRole,
		&i.Name,
		&i.Surname,
		&i.Email,
		&i.PhoneNumber,
		&i.CompanyName,
		&i.CompanyType,
		&i.CompanyWebsite,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const InsertUser = `-- name: InsertUser :one
INSERT INTO users (
    id,
    user_role,
    name,
    surname,
    email,
    phone_number,
    company_name,
    company_type,
    company_website,
    password_hash,
    created_at,
    updated_at
 ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12
) RETURNING id, user_role, name, surname, email, phone_number, company_name, company_type, company_website, password_hash, created_at, updated_at
`

type InsertUserParams struct {
	ID             uuid.UUID `json:"id"`
	UserRole       UserRole  `json:"user_role"`
	Name           string    `json:"name"`
	Surname        string    `json:"surname"`
	Email          string    `json:"email"`
	PhoneNumber    string    `json:"phone_number"`
	CompanyName    string    `json:"company_name"`
	CompanyType    string    `json:"company_type"`
	CompanyWebsite string    `json:"company_website"`
	PasswordHash   string    `json:"password_hash"`
	CreatedAt      time.Time `json:"created_at"`
	UpdatedAt      time.Time `json:"updated_at"`
}

func (q *Queries) InsertUser(ctx context.Context, db DBTX, arg *InsertUserParams) (*Users, error) {
	row := db.QueryRow(ctx, InsertUser,
		arg.ID,
		arg.UserRole,
		arg.Name,
		arg.Surname,
		arg.Email,
		arg.PhoneNumber,
		arg.CompanyName,
		arg.CompanyType,
		arg.CompanyWebsite,
		arg.PasswordHash,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.UserRole,
		&i.Name,
		&i.Surname,
		&i.Email,
		&i.PhoneNumber,
		&i.CompanyName,
		&i.CompanyType,
		&i.CompanyWebsite,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const UpdateUser = `-- name: UpdateUser :one
UPDATE users
SET
    user_role = COALESCE($1, user_role),
    name = COALESCE($2, name),
    surname = COALESCE($3, surname),
    email = COALESCE($4, email),
    phone_number = COALESCE($5, phone_number),
    company_name = COALESCE($6, company_name),
    company_type = COALESCE($7, company_type),
    company_website = COALESCE($8, company_website),
    password_hash = COALESCE($9, password_hash),
    updated_at = COALESCE($10, updated_at)
WHERE
id = $11
RETURNING id, user_role, name, surname, email, phone_number, company_name, company_type, company_website, password_hash, created_at, updated_at
`

type UpdateUserParams struct {
	UserRole       NullUserRole       `json:"user_role"`
	Name           pgtype.Text        `json:"name"`
	Surname        pgtype.Text        `json:"surname"`
	Email          pgtype.Text        `json:"email"`
	PhoneNumber    pgtype.Text        `json:"phone_number"`
	CompanyName    pgtype.Text        `json:"company_name"`
	CompanyType    pgtype.Text        `json:"company_type"`
	CompanyWebsite pgtype.Text        `json:"company_website"`
	PasswordHash   pgtype.Text        `json:"password_hash"`
	UpdatedAt      pgtype.Timestamptz `json:"updated_at"`
	ID             uuid.UUID          `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, db DBTX, arg *UpdateUserParams) (*Users, error) {
	row := db.QueryRow(ctx, UpdateUser,
		arg.UserRole,
		arg.Name,
		arg.Surname,
		arg.Email,
		arg.PhoneNumber,
		arg.CompanyName,
		arg.CompanyType,
		arg.CompanyWebsite,
		arg.PasswordHash,
		arg.UpdatedAt,
		arg.ID,
	)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.UserRole,
		&i.Name,
		&i.Surname,
		&i.Email,
		&i.PhoneNumber,
		&i.CompanyName,
		&i.CompanyType,
		&i.CompanyWebsite,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
